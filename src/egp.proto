syntax = "proto3";

package egp;

option go_package = "github.com/go-to/egp_protobuf/pb";

enum CategoryType {
  CATEGORY_TYPE_NONE = 0;
  CATEGORY_TYPE_EBISU_1 = 1;
  CATEGORY_TYPE_EBISU_2 = 2;
  CATEGORY_TYPE_EBISU_WEST = 3;
  CATEGORY_TYPE_EBISU_SOUTH = 4;
  CATEGORY_TYPE_BEER_COCKTAIL = 5;
}

enum SearchType {
  SEARCH_TYPE_IN_CURRENT_SALES = 0;
  SEARCH_TYPE_NOT_YET = 1;
  SEARCH_TYPE_IRREGULAR_HOLIDAY = 2;
  SEARCH_TYPE_NEEDS_RESERVATION = 3;
  SEARCH_TYPE_BEER_COCKTAIL = 4;
}

message Date {
  int32 year = 1;
  int32 month = 2;
  int32 day = 3;
}

message Event {
  int64 ID = 1;
  string Name = 2;
  int32 Year = 3;
  Date StartDate = 4;
  Date EndDate = 5;
}

message Category {
  int64 ID = 1;
  string Name = 2;
}

message Categories {
  repeated Category Categories = 1;
}

message BeerType {
  int64 ID = 1;
  string Name = 2;
}

message BeerTypes {
  repeated BeerType BeerTypes = 1;
}

message Shop {
  int64 ID = 1;
  int64 EventID = 2;
  int32 Year = 34;
  CategoryType CategoryID = 3;
  string CategoryName = 35;
  int32 No = 4;
  string ShopName = 5;
  string MenuName = 6;
  string MenuImageUrl = 36;
  string Phone = 7;
  string Address = 8;
  string BusinessDays = 9;
  string RegularHoliday = 10;
  string BusinessHours = 11;
  string ChargePrice = 12;
  int32 NormalizedChargePrice = 13;
  string SinglePrice = 14;
  int32 NormalizedSinglePrice = 15;
  string SetPrice = 16;
  int32 NormalizedSetPrice = 17;
  string BeerType = 18;
  string NeedsReservation = 19;
  bool NormalizedNeedsReservation = 20;
  string UseHachipay = 21;
  bool NormalizedUseHachipay = 22;
  bool IsOpenHoliday = 23;
  bool IsIrregularHoliday = 24;
  double Latitude = 25;
  double Longitude = 26;
  string Distance = 27;
  int32 WeekNumber = 28;
  int32 DayOfWeek = 29;
  string StartTime = 30;
  string EndTime = 31;
  bool IsHoliday = 32;
  bool InCurrentSales = 33;
  bool IsStamped = 37;
  int32 NumberOfTimes = 38;
}

message ShopLocation {
  int64 ID = 1;
  int64 ShopID = 2;
  double Latitude = 3;
  double Longitude = 4;
  string Location = 5;
}

message ShopTime {
  int64 ID = 1;
  int64 ShopID = 2;
  int32 WeekNumber = 3;
  int32 DayOfWeek = 4;
  string StartTime = 5;
  string EndTime = 6;
  bool IsHoliday = 7;
}

message ShopsRequest {
  repeated SearchType SearchTypes = 1;
  string UserId = 2;
}

message ShopsResponse {
  repeated Shop Shops = 1;
}

message AddStampRequest {
  string UserId = 1;
  int64 ShopId = 2;
}

message AddStampResponse {
  int32 NumberOfTimes = 1;
}

service EgpService {
  // 店舗情報取得
  rpc GetShops (ShopsRequest) returns (ShopsResponse);
  // スタンプ追加
  rpc AddStamp (AddStampRequest) returns (AddStampResponse);
}
