// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.3
// source: bcrd.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CategoryType int32

const (
	CategoryType_CATEGORY_TYPE_NONE          CategoryType = 0
	CategoryType_CATEGORY_TYPE_EBISU_1       CategoryType = 1
	CategoryType_CATEGORY_TYPE_EBISU_2       CategoryType = 2
	CategoryType_CATEGORY_TYPE_EBISU_WEST    CategoryType = 3
	CategoryType_CATEGORY_TYPE_EBISU_SOUTH   CategoryType = 4
	CategoryType_CATEGORY_TYPE_BEER_COCKTAIL CategoryType = 5
)

// Enum value maps for CategoryType.
var (
	CategoryType_name = map[int32]string{
		0: "CATEGORY_TYPE_NONE",
		1: "CATEGORY_TYPE_EBISU_1",
		2: "CATEGORY_TYPE_EBISU_2",
		3: "CATEGORY_TYPE_EBISU_WEST",
		4: "CATEGORY_TYPE_EBISU_SOUTH",
		5: "CATEGORY_TYPE_BEER_COCKTAIL",
	}
	CategoryType_value = map[string]int32{
		"CATEGORY_TYPE_NONE":          0,
		"CATEGORY_TYPE_EBISU_1":       1,
		"CATEGORY_TYPE_EBISU_2":       2,
		"CATEGORY_TYPE_EBISU_WEST":    3,
		"CATEGORY_TYPE_EBISU_SOUTH":   4,
		"CATEGORY_TYPE_BEER_COCKTAIL": 5,
	}
)

func (x CategoryType) Enum() *CategoryType {
	p := new(CategoryType)
	*p = x
	return p
}

func (x CategoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CategoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_bcrd_proto_enumTypes[0].Descriptor()
}

func (CategoryType) Type() protoreflect.EnumType {
	return &file_bcrd_proto_enumTypes[0]
}

func (x CategoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CategoryType.Descriptor instead.
func (CategoryType) EnumDescriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{0}
}

type SearchType int32

const (
	SearchType_SEARCH_TYPE_IN_CURRENT_SALES  SearchType = 0
	SearchType_SEARCH_TYPE_NOT_YET           SearchType = 1
	SearchType_SEARCH_TYPE_IRREGULAR_HOLIDAY SearchType = 2
	SearchType_SEARCH_TYPE_NEEDS_RESERVATION SearchType = 3
	SearchType_SEARCH_TYPE_BEER_COCKTAIL     SearchType = 4
)

// Enum value maps for SearchType.
var (
	SearchType_name = map[int32]string{
		0: "SEARCH_TYPE_IN_CURRENT_SALES",
		1: "SEARCH_TYPE_NOT_YET",
		2: "SEARCH_TYPE_IRREGULAR_HOLIDAY",
		3: "SEARCH_TYPE_NEEDS_RESERVATION",
		4: "SEARCH_TYPE_BEER_COCKTAIL",
	}
	SearchType_value = map[string]int32{
		"SEARCH_TYPE_IN_CURRENT_SALES":  0,
		"SEARCH_TYPE_NOT_YET":           1,
		"SEARCH_TYPE_IRREGULAR_HOLIDAY": 2,
		"SEARCH_TYPE_NEEDS_RESERVATION": 3,
		"SEARCH_TYPE_BEER_COCKTAIL":     4,
	}
)

func (x SearchType) Enum() *SearchType {
	p := new(SearchType)
	*p = x
	return p
}

func (x SearchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchType) Descriptor() protoreflect.EnumDescriptor {
	return file_bcrd_proto_enumTypes[1].Descriptor()
}

func (SearchType) Type() protoreflect.EnumType {
	return &file_bcrd_proto_enumTypes[1]
}

func (x SearchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchType.Descriptor instead.
func (SearchType) EnumDescriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{1}
}

type SortOrderType int32

const (
	SortOrderType_SORT_ORDER_NO       SortOrderType = 0
	SortOrderType_SORT_ORDER_DISTANCE SortOrderType = 1
)

// Enum value maps for SortOrderType.
var (
	SortOrderType_name = map[int32]string{
		0: "SORT_ORDER_NO",
		1: "SORT_ORDER_DISTANCE",
	}
	SortOrderType_value = map[string]int32{
		"SORT_ORDER_NO":       0,
		"SORT_ORDER_DISTANCE": 1,
	}
)

func (x SortOrderType) Enum() *SortOrderType {
	p := new(SortOrderType)
	*p = x
	return p
}

func (x SortOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_bcrd_proto_enumTypes[2].Descriptor()
}

func (SortOrderType) Type() protoreflect.EnumType {
	return &file_bcrd_proto_enumTypes[2]
}

func (x SortOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrderType.Descriptor instead.
func (SortOrderType) EnumDescriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{2}
}

type Date struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month         int32                  `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day           int32                  `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Date) Reset() {
	*x = Date{}
	mi := &file_bcrd_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{0}
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Year          int32                  `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
	StartDate     *Date                  `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *Date                  `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_bcrd_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Event) GetStartDate() *Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Event) GetEndDate() *Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type Category struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_bcrd_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{2}
}

func (x *Category) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Categories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Categories    []*Category            `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Categories) Reset() {
	*x = Categories{}
	mi := &file_bcrd_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Categories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Categories) ProtoMessage() {}

func (x *Categories) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Categories.ProtoReflect.Descriptor instead.
func (*Categories) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{3}
}

func (x *Categories) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type BeerType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeerType) Reset() {
	*x = BeerType{}
	mi := &file_bcrd_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeerType) ProtoMessage() {}

func (x *BeerType) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeerType.ProtoReflect.Descriptor instead.
func (*BeerType) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{4}
}

func (x *BeerType) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BeerType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BeerTypes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BeerTypes     []*BeerType            `protobuf:"bytes,1,rep,name=beer_types,json=beerTypes,proto3" json:"beer_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeerTypes) Reset() {
	*x = BeerTypes{}
	mi := &file_bcrd_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeerTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeerTypes) ProtoMessage() {}

func (x *BeerTypes) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeerTypes.ProtoReflect.Descriptor instead.
func (*BeerTypes) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{5}
}

func (x *BeerTypes) GetBeerTypes() []*BeerType {
	if x != nil {
		return x.BeerTypes
	}
	return nil
}

type Shop struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Id                         int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId                    int64                  `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Year                       int32                  `protobuf:"varint,34,opt,name=year,proto3" json:"year,omitempty"`
	CategoryId                 CategoryType           `protobuf:"varint,3,opt,name=category_id,json=categoryId,proto3,enum=bcrd.CategoryType" json:"category_id,omitempty"`
	CategoryName               string                 `protobuf:"bytes,35,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
	No                         int32                  `protobuf:"varint,4,opt,name=no,proto3" json:"no,omitempty"`
	ShopName                   string                 `protobuf:"bytes,5,opt,name=shop_name,json=shopName,proto3" json:"shop_name,omitempty"`
	MenuName                   string                 `protobuf:"bytes,6,opt,name=menu_name,json=menuName,proto3" json:"menu_name,omitempty"`
	MenuImageUrl               string                 `protobuf:"bytes,36,opt,name=menu_image_url,json=menuImageUrl,proto3" json:"menu_image_url,omitempty"`
	Phone                      string                 `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Address                    string                 `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	BusinessDays               string                 `protobuf:"bytes,9,opt,name=business_days,json=businessDays,proto3" json:"business_days,omitempty"`
	RegularHoliday             string                 `protobuf:"bytes,10,opt,name=regular_holiday,json=regularHoliday,proto3" json:"regular_holiday,omitempty"`
	BusinessHours              string                 `protobuf:"bytes,11,opt,name=business_hours,json=businessHours,proto3" json:"business_hours,omitempty"`
	ChargePrice                string                 `protobuf:"bytes,12,opt,name=charge_price,json=chargePrice,proto3" json:"charge_price,omitempty"`
	NormalizedChargePrice      int32                  `protobuf:"varint,13,opt,name=normalized_charge_price,json=normalizedChargePrice,proto3" json:"normalized_charge_price,omitempty"`
	SinglePrice                string                 `protobuf:"bytes,14,opt,name=single_price,json=singlePrice,proto3" json:"single_price,omitempty"`
	NormalizedSinglePrice      int32                  `protobuf:"varint,15,opt,name=normalized_single_price,json=normalizedSinglePrice,proto3" json:"normalized_single_price,omitempty"`
	SetPrice                   string                 `protobuf:"bytes,16,opt,name=set_price,json=setPrice,proto3" json:"set_price,omitempty"`
	NormalizedSetPrice         int32                  `protobuf:"varint,17,opt,name=normalized_set_price,json=normalizedSetPrice,proto3" json:"normalized_set_price,omitempty"`
	BeerType                   string                 `protobuf:"bytes,18,opt,name=beer_type,json=beerType,proto3" json:"beer_type,omitempty"`
	NeedsReservation           string                 `protobuf:"bytes,19,opt,name=needs_reservation,json=needsReservation,proto3" json:"needs_reservation,omitempty"`
	NormalizedNeedsReservation bool                   `protobuf:"varint,20,opt,name=normalized_needs_reservation,json=normalizedNeedsReservation,proto3" json:"normalized_needs_reservation,omitempty"`
	UseHachipay                string                 `protobuf:"bytes,21,opt,name=use_hachipay,json=useHachipay,proto3" json:"use_hachipay,omitempty"`
	NormalizedUseHachipay      bool                   `protobuf:"varint,22,opt,name=normalized_use_hachipay,json=normalizedUseHachipay,proto3" json:"normalized_use_hachipay,omitempty"`
	IsOpenHoliday              bool                   `protobuf:"varint,23,opt,name=is_open_holiday,json=isOpenHoliday,proto3" json:"is_open_holiday,omitempty"`
	IsIrregularHoliday         bool                   `protobuf:"varint,24,opt,name=is_irregular_holiday,json=isIrregularHoliday,proto3" json:"is_irregular_holiday,omitempty"`
	Latitude                   float64                `protobuf:"fixed64,25,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude                  float64                `protobuf:"fixed64,26,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Distance                   string                 `protobuf:"bytes,27,opt,name=distance,proto3" json:"distance,omitempty"`
	WeekNumber                 int32                  `protobuf:"varint,28,opt,name=week_number,json=weekNumber,proto3" json:"week_number,omitempty"`
	DayOfWeek                  int32                  `protobuf:"varint,29,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
	StartTime                  string                 `protobuf:"bytes,30,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                    string                 `protobuf:"bytes,31,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IsHoliday                  bool                   `protobuf:"varint,32,opt,name=is_holiday,json=isHoliday,proto3" json:"is_holiday,omitempty"`
	InCurrentSales             bool                   `protobuf:"varint,33,opt,name=in_current_sales,json=inCurrentSales,proto3" json:"in_current_sales,omitempty"`
	IsStamped                  bool                   `protobuf:"varint,37,opt,name=is_stamped,json=isStamped,proto3" json:"is_stamped,omitempty"`
	NumberOfTimes              int32                  `protobuf:"varint,38,opt,name=number_of_times,json=numberOfTimes,proto3" json:"number_of_times,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Shop) Reset() {
	*x = Shop{}
	mi := &file_bcrd_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shop) ProtoMessage() {}

func (x *Shop) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shop.ProtoReflect.Descriptor instead.
func (*Shop) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{6}
}

func (x *Shop) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Shop) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *Shop) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Shop) GetCategoryId() CategoryType {
	if x != nil {
		return x.CategoryId
	}
	return CategoryType_CATEGORY_TYPE_NONE
}

func (x *Shop) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *Shop) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *Shop) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *Shop) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *Shop) GetMenuImageUrl() string {
	if x != nil {
		return x.MenuImageUrl
	}
	return ""
}

func (x *Shop) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Shop) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Shop) GetBusinessDays() string {
	if x != nil {
		return x.BusinessDays
	}
	return ""
}

func (x *Shop) GetRegularHoliday() string {
	if x != nil {
		return x.RegularHoliday
	}
	return ""
}

func (x *Shop) GetBusinessHours() string {
	if x != nil {
		return x.BusinessHours
	}
	return ""
}

func (x *Shop) GetChargePrice() string {
	if x != nil {
		return x.ChargePrice
	}
	return ""
}

func (x *Shop) GetNormalizedChargePrice() int32 {
	if x != nil {
		return x.NormalizedChargePrice
	}
	return 0
}

func (x *Shop) GetSinglePrice() string {
	if x != nil {
		return x.SinglePrice
	}
	return ""
}

func (x *Shop) GetNormalizedSinglePrice() int32 {
	if x != nil {
		return x.NormalizedSinglePrice
	}
	return 0
}

func (x *Shop) GetSetPrice() string {
	if x != nil {
		return x.SetPrice
	}
	return ""
}

func (x *Shop) GetNormalizedSetPrice() int32 {
	if x != nil {
		return x.NormalizedSetPrice
	}
	return 0
}

func (x *Shop) GetBeerType() string {
	if x != nil {
		return x.BeerType
	}
	return ""
}

func (x *Shop) GetNeedsReservation() string {
	if x != nil {
		return x.NeedsReservation
	}
	return ""
}

func (x *Shop) GetNormalizedNeedsReservation() bool {
	if x != nil {
		return x.NormalizedNeedsReservation
	}
	return false
}

func (x *Shop) GetUseHachipay() string {
	if x != nil {
		return x.UseHachipay
	}
	return ""
}

func (x *Shop) GetNormalizedUseHachipay() bool {
	if x != nil {
		return x.NormalizedUseHachipay
	}
	return false
}

func (x *Shop) GetIsOpenHoliday() bool {
	if x != nil {
		return x.IsOpenHoliday
	}
	return false
}

func (x *Shop) GetIsIrregularHoliday() bool {
	if x != nil {
		return x.IsIrregularHoliday
	}
	return false
}

func (x *Shop) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Shop) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Shop) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

func (x *Shop) GetWeekNumber() int32 {
	if x != nil {
		return x.WeekNumber
	}
	return 0
}

func (x *Shop) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *Shop) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Shop) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Shop) GetIsHoliday() bool {
	if x != nil {
		return x.IsHoliday
	}
	return false
}

func (x *Shop) GetInCurrentSales() bool {
	if x != nil {
		return x.InCurrentSales
	}
	return false
}

func (x *Shop) GetIsStamped() bool {
	if x != nil {
		return x.IsStamped
	}
	return false
}

func (x *Shop) GetNumberOfTimes() int32 {
	if x != nil {
		return x.NumberOfTimes
	}
	return 0
}

type ShopLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShopId        int64                  `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	Latitude      float64                `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Location      string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopLocation) Reset() {
	*x = ShopLocation{}
	mi := &file_bcrd_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopLocation) ProtoMessage() {}

func (x *ShopLocation) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopLocation.ProtoReflect.Descriptor instead.
func (*ShopLocation) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{7}
}

func (x *ShopLocation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShopLocation) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShopLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ShopLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ShopLocation) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type ShopTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShopId        int64                  `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	WeekNumber    int32                  `protobuf:"varint,3,opt,name=week_number,json=weekNumber,proto3" json:"week_number,omitempty"`
	DayOfWeek     int32                  `protobuf:"varint,4,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
	StartTime     string                 `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       string                 `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IsHoliday     bool                   `protobuf:"varint,7,opt,name=is_holiday,json=isHoliday,proto3" json:"is_holiday,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopTime) Reset() {
	*x = ShopTime{}
	mi := &file_bcrd_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopTime) ProtoMessage() {}

func (x *ShopTime) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopTime.ProtoReflect.Descriptor instead.
func (*ShopTime) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{8}
}

func (x *ShopTime) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ShopTime) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ShopTime) GetWeekNumber() int32 {
	if x != nil {
		return x.WeekNumber
	}
	return 0
}

func (x *ShopTime) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *ShopTime) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ShopTime) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ShopTime) GetIsHoliday() bool {
	if x != nil {
		return x.IsHoliday
	}
	return false
}

type ShopsTotalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopsTotalRequest) Reset() {
	*x = ShopsTotalRequest{}
	mi := &file_bcrd_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopsTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopsTotalRequest) ProtoMessage() {}

func (x *ShopsTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopsTotalRequest.ProtoReflect.Descriptor instead.
func (*ShopsTotalRequest) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{9}
}

func (x *ShopsTotalRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type ShopsTotalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalNum      int64                  `protobuf:"varint,1,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopsTotalResponse) Reset() {
	*x = ShopsTotalResponse{}
	mi := &file_bcrd_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopsTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopsTotalResponse) ProtoMessage() {}

func (x *ShopsTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopsTotalResponse.ProtoReflect.Descriptor instead.
func (*ShopsTotalResponse) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{10}
}

func (x *ShopsTotalResponse) GetTotalNum() int64 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

type ShopsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SearchTypes   []SearchType           `protobuf:"varint,1,rep,packed,name=search_types,json=searchTypes,proto3,enum=bcrd.SearchType" json:"search_types,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Keyword       string                 `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Year          int32                  `protobuf:"varint,4,opt,name=year,proto3" json:"year,omitempty"`
	SortOrder     SortOrderType          `protobuf:"varint,5,opt,name=sort_order,json=sortOrder,proto3,enum=bcrd.SortOrderType" json:"sort_order,omitempty"`
	Latitude      float64                `protobuf:"fixed64,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopsRequest) Reset() {
	*x = ShopsRequest{}
	mi := &file_bcrd_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopsRequest) ProtoMessage() {}

func (x *ShopsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopsRequest.ProtoReflect.Descriptor instead.
func (*ShopsRequest) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{11}
}

func (x *ShopsRequest) GetSearchTypes() []SearchType {
	if x != nil {
		return x.SearchTypes
	}
	return nil
}

func (x *ShopsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShopsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ShopsRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShopsRequest) GetSortOrder() SortOrderType {
	if x != nil {
		return x.SortOrder
	}
	return SortOrderType_SORT_ORDER_NO
}

func (x *ShopsRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ShopsRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type ShopsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Shops         []*Shop                `protobuf:"bytes,1,rep,name=shops,proto3" json:"shops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopsResponse) Reset() {
	*x = ShopsResponse{}
	mi := &file_bcrd_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopsResponse) ProtoMessage() {}

func (x *ShopsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopsResponse.ProtoReflect.Descriptor instead.
func (*ShopsResponse) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{12}
}

func (x *ShopsResponse) GetShops() []*Shop {
	if x != nil {
		return x.Shops
	}
	return nil
}

type ShopRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ShopId        int64                  `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopRequest) Reset() {
	*x = ShopRequest{}
	mi := &file_bcrd_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopRequest) ProtoMessage() {}

func (x *ShopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopRequest.ProtoReflect.Descriptor instead.
func (*ShopRequest) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{13}
}

func (x *ShopRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ShopRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

type ShopResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Shop          *Shop                  `protobuf:"bytes,1,opt,name=shop,proto3" json:"shop,omitempty"`
	IsEventPeriod bool                   `protobuf:"varint,2,opt,name=is_event_period,json=isEventPeriod,proto3" json:"is_event_period,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopResponse) Reset() {
	*x = ShopResponse{}
	mi := &file_bcrd_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopResponse) ProtoMessage() {}

func (x *ShopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopResponse.ProtoReflect.Descriptor instead.
func (*ShopResponse) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{14}
}

func (x *ShopResponse) GetShop() *Shop {
	if x != nil {
		return x.Shop
	}
	return nil
}

func (x *ShopResponse) GetIsEventPeriod() bool {
	if x != nil {
		return x.IsEventPeriod
	}
	return false
}

type StampRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ShopId        int64                  `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StampRequest) Reset() {
	*x = StampRequest{}
	mi := &file_bcrd_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampRequest) ProtoMessage() {}

func (x *StampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampRequest.ProtoReflect.Descriptor instead.
func (*StampRequest) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{15}
}

func (x *StampRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StampRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

type StampResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumberOfTimes int32                  `protobuf:"varint,1,opt,name=number_of_times,json=numberOfTimes,proto3" json:"number_of_times,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StampResponse) Reset() {
	*x = StampResponse{}
	mi := &file_bcrd_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StampResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampResponse) ProtoMessage() {}

func (x *StampResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampResponse.ProtoReflect.Descriptor instead.
func (*StampResponse) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{16}
}

func (x *StampResponse) GetNumberOfTimes() int32 {
	if x != nil {
		return x.NumberOfTimes
	}
	return 0
}

type MergeUserStampRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AnonymousUserId string                 `protobuf:"bytes,2,opt,name=anonymous_user_id,json=anonymousUserId,proto3" json:"anonymous_user_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MergeUserStampRequest) Reset() {
	*x = MergeUserStampRequest{}
	mi := &file_bcrd_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeUserStampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeUserStampRequest) ProtoMessage() {}

func (x *MergeUserStampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeUserStampRequest.ProtoReflect.Descriptor instead.
func (*MergeUserStampRequest) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{17}
}

func (x *MergeUserStampRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MergeUserStampRequest) GetAnonymousUserId() string {
	if x != nil {
		return x.AnonymousUserId
	}
	return ""
}

type MergeUserStampResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StampNum      int32                  `protobuf:"varint,1,opt,name=stamp_num,json=stampNum,proto3" json:"stamp_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeUserStampResponse) Reset() {
	*x = MergeUserStampResponse{}
	mi := &file_bcrd_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeUserStampResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeUserStampResponse) ProtoMessage() {}

func (x *MergeUserStampResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bcrd_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeUserStampResponse.ProtoReflect.Descriptor instead.
func (*MergeUserStampResponse) Descriptor() ([]byte, []int) {
	return file_bcrd_proto_rawDescGZIP(), []int{18}
}

func (x *MergeUserStampResponse) GetStampNum() int32 {
	if x != nil {
		return x.StampNum
	}
	return 0
}

var File_bcrd_proto protoreflect.FileDescriptor

var file_bcrd_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x62, 0x63,
	0x72, 0x64, 0x22, 0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62,
	0x63, 0x72, 0x64, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x08, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x0a, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62,
	0x63, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x08, 0x42, 0x65, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x42, 0x65, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x62, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x63, 0x72, 0x64,
	0x2e, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x65, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xdb, 0x0a, 0x0a, 0x04, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x33, 0x0a, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x17, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x65, 0x65, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x5f, 0x68, 0x61, 0x63, 0x68, 0x69, 0x70, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x48, 0x61, 0x63, 0x68, 0x69, 0x70, 0x61, 0x79, 0x12,
	0x36, 0x0a, 0x17, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x68, 0x61, 0x63, 0x68, 0x69, 0x70, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x48,
	0x61, 0x63, 0x68, 0x69, 0x70, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12,
	0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x69, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f,
	0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69,
	0x73, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x65,
	0x65, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcd, 0x01, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x65, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77,
	0x65, 0x65, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x22, 0x27, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x31, 0x0a, 0x12, 0x53,
	0x68, 0x6f, 0x70, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0xf8,
	0x01, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x0d, 0x53, 0x68, 0x6f,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x68,
	0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x63, 0x72, 0x64,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x3f, 0x0a, 0x0b,
	0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x56, 0x0a,
	0x0c, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x04, 0x73, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x63,
	0x72, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x70, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x40, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x22, 0x5c, 0x0a, 0x15, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x35,
	0x0a, 0x16, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x75, 0x6d, 0x2a, 0xba, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x42, 0x49, 0x53, 0x55, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x42, 0x49, 0x53, 0x55,
	0x5f, 0x32, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x42, 0x49, 0x53, 0x55, 0x5f, 0x57, 0x45, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x42, 0x49, 0x53, 0x55, 0x5f, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x10,
	0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x49, 0x4c,
	0x10, 0x05, 0x2a, 0xac, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x4c, 0x45,
	0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x59, 0x45, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x52, 0x52, 0x45,
	0x47, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x48, 0x4f, 0x4c, 0x49, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x45, 0x45, 0x44, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x49, 0x4c, 0x10,
	0x04, 0x2a, 0x3b, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x32, 0xf2,
	0x02, 0x0a, 0x0b, 0x42, 0x63, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x17, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x12,
	0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x6f, 0x70, 0x12, 0x11, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x68, 0x6f,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x41, 0x64, 0x64,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x63, 0x72, 0x64,
	0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x2e,
	0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x63, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x6f, 0x2f, 0x62, 0x63, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bcrd_proto_rawDescOnce sync.Once
	file_bcrd_proto_rawDescData = file_bcrd_proto_rawDesc
)

func file_bcrd_proto_rawDescGZIP() []byte {
	file_bcrd_proto_rawDescOnce.Do(func() {
		file_bcrd_proto_rawDescData = protoimpl.X.CompressGZIP(file_bcrd_proto_rawDescData)
	})
	return file_bcrd_proto_rawDescData
}

var file_bcrd_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bcrd_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_bcrd_proto_goTypes = []any{
	(CategoryType)(0),              // 0: bcrd.CategoryType
	(SearchType)(0),                // 1: bcrd.SearchType
	(SortOrderType)(0),             // 2: bcrd.SortOrderType
	(*Date)(nil),                   // 3: bcrd.Date
	(*Event)(nil),                  // 4: bcrd.Event
	(*Category)(nil),               // 5: bcrd.Category
	(*Categories)(nil),             // 6: bcrd.Categories
	(*BeerType)(nil),               // 7: bcrd.BeerType
	(*BeerTypes)(nil),              // 8: bcrd.BeerTypes
	(*Shop)(nil),                   // 9: bcrd.Shop
	(*ShopLocation)(nil),           // 10: bcrd.ShopLocation
	(*ShopTime)(nil),               // 11: bcrd.ShopTime
	(*ShopsTotalRequest)(nil),      // 12: bcrd.ShopsTotalRequest
	(*ShopsTotalResponse)(nil),     // 13: bcrd.ShopsTotalResponse
	(*ShopsRequest)(nil),           // 14: bcrd.ShopsRequest
	(*ShopsResponse)(nil),          // 15: bcrd.ShopsResponse
	(*ShopRequest)(nil),            // 16: bcrd.ShopRequest
	(*ShopResponse)(nil),           // 17: bcrd.ShopResponse
	(*StampRequest)(nil),           // 18: bcrd.StampRequest
	(*StampResponse)(nil),          // 19: bcrd.StampResponse
	(*MergeUserStampRequest)(nil),  // 20: bcrd.MergeUserStampRequest
	(*MergeUserStampResponse)(nil), // 21: bcrd.MergeUserStampResponse
}
var file_bcrd_proto_depIdxs = []int32{
	3,  // 0: bcrd.Event.start_date:type_name -> bcrd.Date
	3,  // 1: bcrd.Event.end_date:type_name -> bcrd.Date
	5,  // 2: bcrd.Categories.categories:type_name -> bcrd.Category
	7,  // 3: bcrd.BeerTypes.beer_types:type_name -> bcrd.BeerType
	0,  // 4: bcrd.Shop.category_id:type_name -> bcrd.CategoryType
	1,  // 5: bcrd.ShopsRequest.search_types:type_name -> bcrd.SearchType
	2,  // 6: bcrd.ShopsRequest.sort_order:type_name -> bcrd.SortOrderType
	9,  // 7: bcrd.ShopsResponse.shops:type_name -> bcrd.Shop
	9,  // 8: bcrd.ShopResponse.shop:type_name -> bcrd.Shop
	12, // 9: bcrd.BcrdService.GetShopsTotal:input_type -> bcrd.ShopsTotalRequest
	14, // 10: bcrd.BcrdService.GetShops:input_type -> bcrd.ShopsRequest
	16, // 11: bcrd.BcrdService.GetShop:input_type -> bcrd.ShopRequest
	18, // 12: bcrd.BcrdService.AddStamp:input_type -> bcrd.StampRequest
	18, // 13: bcrd.BcrdService.DeleteStamp:input_type -> bcrd.StampRequest
	20, // 14: bcrd.BcrdService.MergeUserStamp:input_type -> bcrd.MergeUserStampRequest
	13, // 15: bcrd.BcrdService.GetShopsTotal:output_type -> bcrd.ShopsTotalResponse
	15, // 16: bcrd.BcrdService.GetShops:output_type -> bcrd.ShopsResponse
	17, // 17: bcrd.BcrdService.GetShop:output_type -> bcrd.ShopResponse
	19, // 18: bcrd.BcrdService.AddStamp:output_type -> bcrd.StampResponse
	19, // 19: bcrd.BcrdService.DeleteStamp:output_type -> bcrd.StampResponse
	21, // 20: bcrd.BcrdService.MergeUserStamp:output_type -> bcrd.MergeUserStampResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_bcrd_proto_init() }
func file_bcrd_proto_init() {
	if File_bcrd_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bcrd_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bcrd_proto_goTypes,
		DependencyIndexes: file_bcrd_proto_depIdxs,
		EnumInfos:         file_bcrd_proto_enumTypes,
		MessageInfos:      file_bcrd_proto_msgTypes,
	}.Build()
	File_bcrd_proto = out.File
	file_bcrd_proto_rawDesc = nil
	file_bcrd_proto_goTypes = nil
	file_bcrd_proto_depIdxs = nil
}
