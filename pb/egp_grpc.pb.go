// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: egp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EgpService_GetShops_FullMethodName    = "/egp.EgpService/GetShops"
	EgpService_GetShop_FullMethodName     = "/egp.EgpService/GetShop"
	EgpService_AddStamp_FullMethodName    = "/egp.EgpService/AddStamp"
	EgpService_DeleteStamp_FullMethodName = "/egp.EgpService/DeleteStamp"
)

// EgpServiceClient is the client API for EgpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EgpServiceClient interface {
	// 店舗情報取得
	GetShops(ctx context.Context, in *ShopsRequest, opts ...grpc.CallOption) (*ShopsResponse, error)
	// 店舗情報取得
	GetShop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponse, error)
	// スタンプ追加
	AddStamp(ctx context.Context, in *StampRequest, opts ...grpc.CallOption) (*StampResponse, error)
	// スタンプ削除
	DeleteStamp(ctx context.Context, in *StampRequest, opts ...grpc.CallOption) (*StampResponse, error)
}

type egpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEgpServiceClient(cc grpc.ClientConnInterface) EgpServiceClient {
	return &egpServiceClient{cc}
}

func (c *egpServiceClient) GetShops(ctx context.Context, in *ShopsRequest, opts ...grpc.CallOption) (*ShopsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShopsResponse)
	err := c.cc.Invoke(ctx, EgpService_GetShops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egpServiceClient) GetShop(ctx context.Context, in *ShopRequest, opts ...grpc.CallOption) (*ShopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShopResponse)
	err := c.cc.Invoke(ctx, EgpService_GetShop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egpServiceClient) AddStamp(ctx context.Context, in *StampRequest, opts ...grpc.CallOption) (*StampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StampResponse)
	err := c.cc.Invoke(ctx, EgpService_AddStamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *egpServiceClient) DeleteStamp(ctx context.Context, in *StampRequest, opts ...grpc.CallOption) (*StampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StampResponse)
	err := c.cc.Invoke(ctx, EgpService_DeleteStamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EgpServiceServer is the server API for EgpService service.
// All implementations must embed UnimplementedEgpServiceServer
// for forward compatibility.
type EgpServiceServer interface {
	// 店舗情報取得
	GetShops(context.Context, *ShopsRequest) (*ShopsResponse, error)
	// 店舗情報取得
	GetShop(context.Context, *ShopRequest) (*ShopResponse, error)
	// スタンプ追加
	AddStamp(context.Context, *StampRequest) (*StampResponse, error)
	// スタンプ削除
	DeleteStamp(context.Context, *StampRequest) (*StampResponse, error)
	mustEmbedUnimplementedEgpServiceServer()
}

// UnimplementedEgpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEgpServiceServer struct{}

func (UnimplementedEgpServiceServer) GetShops(context.Context, *ShopsRequest) (*ShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShops not implemented")
}
func (UnimplementedEgpServiceServer) GetShop(context.Context, *ShopRequest) (*ShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShop not implemented")
}
func (UnimplementedEgpServiceServer) AddStamp(context.Context, *StampRequest) (*StampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStamp not implemented")
}
func (UnimplementedEgpServiceServer) DeleteStamp(context.Context, *StampRequest) (*StampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStamp not implemented")
}
func (UnimplementedEgpServiceServer) mustEmbedUnimplementedEgpServiceServer() {}
func (UnimplementedEgpServiceServer) testEmbeddedByValue()                    {}

// UnsafeEgpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EgpServiceServer will
// result in compilation errors.
type UnsafeEgpServiceServer interface {
	mustEmbedUnimplementedEgpServiceServer()
}

func RegisterEgpServiceServer(s grpc.ServiceRegistrar, srv EgpServiceServer) {
	// If the following call pancis, it indicates UnimplementedEgpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EgpService_ServiceDesc, srv)
}

func _EgpService_GetShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgpServiceServer).GetShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgpService_GetShops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgpServiceServer).GetShops(ctx, req.(*ShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgpService_GetShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgpServiceServer).GetShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgpService_GetShop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgpServiceServer).GetShop(ctx, req.(*ShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgpService_AddStamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgpServiceServer).AddStamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgpService_AddStamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgpServiceServer).AddStamp(ctx, req.(*StampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EgpService_DeleteStamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EgpServiceServer).DeleteStamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EgpService_DeleteStamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EgpServiceServer).DeleteStamp(ctx, req.(*StampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EgpService_ServiceDesc is the grpc.ServiceDesc for EgpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EgpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "egp.EgpService",
	HandlerType: (*EgpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShops",
			Handler:    _EgpService_GetShops_Handler,
		},
		{
			MethodName: "GetShop",
			Handler:    _EgpService_GetShop_Handler,
		},
		{
			MethodName: "AddStamp",
			Handler:    _EgpService_AddStamp_Handler,
		},
		{
			MethodName: "DeleteStamp",
			Handler:    _EgpService_DeleteStamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "egp.proto",
}
