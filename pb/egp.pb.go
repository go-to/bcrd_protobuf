// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: egp.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Date struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month         int32                  `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day           int32                  `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Date) Reset() {
	*x = Date{}
	mi := &file_egp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{0}
}

func (x *Date) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Date) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Date) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Year          int32                  `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	StartDate     *Date                  `protobuf:"bytes,4,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate       *Date                  `protobuf:"bytes,5,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_egp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Event) GetStartDate() *Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Event) GetEndDate() *Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type Category struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_egp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{2}
}

func (x *Category) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Categories struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Categories    []*Category            `protobuf:"bytes,1,rep,name=Categories,proto3" json:"Categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Categories) Reset() {
	*x = Categories{}
	mi := &file_egp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Categories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Categories) ProtoMessage() {}

func (x *Categories) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Categories.ProtoReflect.Descriptor instead.
func (*Categories) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{3}
}

func (x *Categories) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type BeerType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeerType) Reset() {
	*x = BeerType{}
	mi := &file_egp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeerType) ProtoMessage() {}

func (x *BeerType) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeerType.ProtoReflect.Descriptor instead.
func (*BeerType) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{4}
}

func (x *BeerType) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *BeerType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BeerTypes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BeerTypes     []*BeerType            `protobuf:"bytes,1,rep,name=BeerTypes,proto3" json:"BeerTypes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BeerTypes) Reset() {
	*x = BeerTypes{}
	mi := &file_egp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeerTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeerTypes) ProtoMessage() {}

func (x *BeerTypes) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeerTypes.ProtoReflect.Descriptor instead.
func (*BeerTypes) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{5}
}

func (x *BeerTypes) GetBeerTypes() []*BeerType {
	if x != nil {
		return x.BeerTypes
	}
	return nil
}

type Shop struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	ID                         int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EventID                    int64                  `protobuf:"varint,2,opt,name=EventID,proto3" json:"EventID,omitempty"`
	CategoryID                 int64                  `protobuf:"varint,3,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
	No                         int32                  `protobuf:"varint,4,opt,name=No,proto3" json:"No,omitempty"`
	ShopName                   string                 `protobuf:"bytes,5,opt,name=ShopName,proto3" json:"ShopName,omitempty"`
	MenuName                   string                 `protobuf:"bytes,6,opt,name=MenuName,proto3" json:"MenuName,omitempty"`
	Phone                      string                 `protobuf:"bytes,7,opt,name=Phone,proto3" json:"Phone,omitempty"`
	Address                    string                 `protobuf:"bytes,8,opt,name=Address,proto3" json:"Address,omitempty"`
	BusinessDays               string                 `protobuf:"bytes,9,opt,name=BusinessDays,proto3" json:"BusinessDays,omitempty"`
	RegularHoliday             string                 `protobuf:"bytes,10,opt,name=RegularHoliday,proto3" json:"RegularHoliday,omitempty"`
	BusinessHours              string                 `protobuf:"bytes,11,opt,name=BusinessHours,proto3" json:"BusinessHours,omitempty"`
	ChargePrice                string                 `protobuf:"bytes,12,opt,name=ChargePrice,proto3" json:"ChargePrice,omitempty"`
	NormalizedChargePrice      int32                  `protobuf:"varint,13,opt,name=NormalizedChargePrice,proto3" json:"NormalizedChargePrice,omitempty"`
	SinglePrice                string                 `protobuf:"bytes,14,opt,name=SinglePrice,proto3" json:"SinglePrice,omitempty"`
	NormalizedSinglePrice      int32                  `protobuf:"varint,15,opt,name=NormalizedSinglePrice,proto3" json:"NormalizedSinglePrice,omitempty"`
	SetPrice                   string                 `protobuf:"bytes,16,opt,name=SetPrice,proto3" json:"SetPrice,omitempty"`
	NormalizedSetPrice         int32                  `protobuf:"varint,17,opt,name=NormalizedSetPrice,proto3" json:"NormalizedSetPrice,omitempty"`
	BeerType                   string                 `protobuf:"bytes,18,opt,name=BeerType,proto3" json:"BeerType,omitempty"`
	NeedsReservation           string                 `protobuf:"bytes,19,opt,name=NeedsReservation,proto3" json:"NeedsReservation,omitempty"`
	NormalizedNeedsReservation bool                   `protobuf:"varint,20,opt,name=NormalizedNeedsReservation,proto3" json:"NormalizedNeedsReservation,omitempty"`
	UseHachipay                string                 `protobuf:"bytes,21,opt,name=UseHachipay,proto3" json:"UseHachipay,omitempty"`
	NormalizedUseHachipay      bool                   `protobuf:"varint,22,opt,name=NormalizedUseHachipay,proto3" json:"NormalizedUseHachipay,omitempty"`
	IsOpenHoliday              bool                   `protobuf:"varint,23,opt,name=IsOpenHoliday,proto3" json:"IsOpenHoliday,omitempty"`
	IsIrregularHoliday         bool                   `protobuf:"varint,24,opt,name=IsIrregularHoliday,proto3" json:"IsIrregularHoliday,omitempty"`
	Latitude                   float64                `protobuf:"fixed64,25,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude                  float64                `protobuf:"fixed64,26,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	Location                   string                 `protobuf:"bytes,27,opt,name=Location,proto3" json:"Location,omitempty"`
	WeekNumber                 int32                  `protobuf:"varint,28,opt,name=WeekNumber,proto3" json:"WeekNumber,omitempty"`
	DayOfWeek                  int32                  `protobuf:"varint,29,opt,name=DayOfWeek,proto3" json:"DayOfWeek,omitempty"`
	StartTime                  string                 `protobuf:"bytes,30,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime                    string                 `protobuf:"bytes,31,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	IsHoliday                  bool                   `protobuf:"varint,32,opt,name=IsHoliday,proto3" json:"IsHoliday,omitempty"`
	InCurrentSales             bool                   `protobuf:"varint,33,opt,name=InCurrentSales,proto3" json:"InCurrentSales,omitempty"`
	BeerTypes                  *BeerTypes             `protobuf:"bytes,34,opt,name=BeerTypes,proto3" json:"BeerTypes,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Shop) Reset() {
	*x = Shop{}
	mi := &file_egp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Shop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shop) ProtoMessage() {}

func (x *Shop) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shop.ProtoReflect.Descriptor instead.
func (*Shop) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{6}
}

func (x *Shop) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Shop) GetEventID() int64 {
	if x != nil {
		return x.EventID
	}
	return 0
}

func (x *Shop) GetCategoryID() int64 {
	if x != nil {
		return x.CategoryID
	}
	return 0
}

func (x *Shop) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *Shop) GetShopName() string {
	if x != nil {
		return x.ShopName
	}
	return ""
}

func (x *Shop) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *Shop) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Shop) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Shop) GetBusinessDays() string {
	if x != nil {
		return x.BusinessDays
	}
	return ""
}

func (x *Shop) GetRegularHoliday() string {
	if x != nil {
		return x.RegularHoliday
	}
	return ""
}

func (x *Shop) GetBusinessHours() string {
	if x != nil {
		return x.BusinessHours
	}
	return ""
}

func (x *Shop) GetChargePrice() string {
	if x != nil {
		return x.ChargePrice
	}
	return ""
}

func (x *Shop) GetNormalizedChargePrice() int32 {
	if x != nil {
		return x.NormalizedChargePrice
	}
	return 0
}

func (x *Shop) GetSinglePrice() string {
	if x != nil {
		return x.SinglePrice
	}
	return ""
}

func (x *Shop) GetNormalizedSinglePrice() int32 {
	if x != nil {
		return x.NormalizedSinglePrice
	}
	return 0
}

func (x *Shop) GetSetPrice() string {
	if x != nil {
		return x.SetPrice
	}
	return ""
}

func (x *Shop) GetNormalizedSetPrice() int32 {
	if x != nil {
		return x.NormalizedSetPrice
	}
	return 0
}

func (x *Shop) GetBeerType() string {
	if x != nil {
		return x.BeerType
	}
	return ""
}

func (x *Shop) GetNeedsReservation() string {
	if x != nil {
		return x.NeedsReservation
	}
	return ""
}

func (x *Shop) GetNormalizedNeedsReservation() bool {
	if x != nil {
		return x.NormalizedNeedsReservation
	}
	return false
}

func (x *Shop) GetUseHachipay() string {
	if x != nil {
		return x.UseHachipay
	}
	return ""
}

func (x *Shop) GetNormalizedUseHachipay() bool {
	if x != nil {
		return x.NormalizedUseHachipay
	}
	return false
}

func (x *Shop) GetIsOpenHoliday() bool {
	if x != nil {
		return x.IsOpenHoliday
	}
	return false
}

func (x *Shop) GetIsIrregularHoliday() bool {
	if x != nil {
		return x.IsIrregularHoliday
	}
	return false
}

func (x *Shop) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Shop) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Shop) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Shop) GetWeekNumber() int32 {
	if x != nil {
		return x.WeekNumber
	}
	return 0
}

func (x *Shop) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *Shop) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Shop) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Shop) GetIsHoliday() bool {
	if x != nil {
		return x.IsHoliday
	}
	return false
}

func (x *Shop) GetInCurrentSales() bool {
	if x != nil {
		return x.InCurrentSales
	}
	return false
}

func (x *Shop) GetBeerTypes() *BeerTypes {
	if x != nil {
		return x.BeerTypes
	}
	return nil
}

type ShopLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ShopID        int64                  `protobuf:"varint,2,opt,name=ShopID,proto3" json:"ShopID,omitempty"`
	Latitude      float64                `protobuf:"fixed64,3,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude     float64                `protobuf:"fixed64,4,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	Location      string                 `protobuf:"bytes,5,opt,name=Location,proto3" json:"Location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopLocation) Reset() {
	*x = ShopLocation{}
	mi := &file_egp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopLocation) ProtoMessage() {}

func (x *ShopLocation) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopLocation.ProtoReflect.Descriptor instead.
func (*ShopLocation) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{7}
}

func (x *ShopLocation) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ShopLocation) GetShopID() int64 {
	if x != nil {
		return x.ShopID
	}
	return 0
}

func (x *ShopLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ShopLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ShopLocation) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type ShopTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            int64                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ShopID        int64                  `protobuf:"varint,2,opt,name=ShopID,proto3" json:"ShopID,omitempty"`
	WeekNumber    int32                  `protobuf:"varint,3,opt,name=WeekNumber,proto3" json:"WeekNumber,omitempty"`
	DayOfWeek     int32                  `protobuf:"varint,4,opt,name=DayOfWeek,proto3" json:"DayOfWeek,omitempty"`
	StartTime     string                 `protobuf:"bytes,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime       string                 `protobuf:"bytes,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	IsHoliday     bool                   `protobuf:"varint,7,opt,name=IsHoliday,proto3" json:"IsHoliday,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopTime) Reset() {
	*x = ShopTime{}
	mi := &file_egp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopTime) ProtoMessage() {}

func (x *ShopTime) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopTime.ProtoReflect.Descriptor instead.
func (*ShopTime) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{8}
}

func (x *ShopTime) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ShopTime) GetShopID() int64 {
	if x != nil {
		return x.ShopID
	}
	return 0
}

func (x *ShopTime) GetWeekNumber() int32 {
	if x != nil {
		return x.WeekNumber
	}
	return 0
}

func (x *ShopTime) GetDayOfWeek() int32 {
	if x != nil {
		return x.DayOfWeek
	}
	return 0
}

func (x *ShopTime) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ShopTime) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ShopTime) GetIsHoliday() bool {
	if x != nil {
		return x.IsHoliday
	}
	return false
}

type ShopsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopsRequest) Reset() {
	*x = ShopsRequest{}
	mi := &file_egp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopsRequest) ProtoMessage() {}

func (x *ShopsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopsRequest.ProtoReflect.Descriptor instead.
func (*ShopsRequest) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{9}
}

type ShopsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Shops         []*Shop                `protobuf:"bytes,1,rep,name=Shops,proto3" json:"Shops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopsResponse) Reset() {
	*x = ShopsResponse{}
	mi := &file_egp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopsResponse) ProtoMessage() {}

func (x *ShopsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_egp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopsResponse.ProtoReflect.Descriptor instead.
func (*ShopsResponse) Descriptor() ([]byte, []int) {
	return file_egp_proto_rawDescGZIP(), []int{10}
}

func (x *ShopsResponse) GetShops() []*Shop {
	if x != nil {
		return x.Shops
	}
	return nil
}

var File_egp_proto protoreflect.FileDescriptor

var file_egp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x65, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x65, 0x67, 0x70,
	0x22, 0x42, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x65, 0x67, 0x70, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x65, 0x67, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x2e, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x67, 0x70, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x2e, 0x0a, 0x08, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x38, 0x0a, 0x09, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x09, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x67, 0x70, 0x2e, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xac, 0x09, 0x0a, 0x04,
	0x53, 0x68, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x0e,
	0x0a, 0x02, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65,
	0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65,
	0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x44, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4e, 0x65, 0x65, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x65, 0x65, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x48, 0x61, 0x63, 0x68, 0x69, 0x70, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x48, 0x61, 0x63, 0x68, 0x69, 0x70, 0x61, 0x79, 0x12, 0x34,
	0x0a, 0x15, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x48,
	0x61, 0x63, 0x68, 0x69, 0x70, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x55, 0x73, 0x65, 0x48, 0x61, 0x63, 0x68,
	0x69, 0x70, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x49, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73,
	0x49, 0x72, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x73, 0x49, 0x72, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x65, 0x65, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x65, 0x65, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x09,
	0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x67, 0x70, 0x2e, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x09, 0x42, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x53,
	0x68, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x68, 0x6f, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x68, 0x6f,
	0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x08, 0x53, 0x68,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x57, 0x65, 0x65, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x57, 0x65, 0x65, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x30, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x65, 0x67, 0x70, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x05, 0x53,
	0x68, 0x6f, 0x70, 0x73, 0x32, 0x3f, 0x0a, 0x0a, 0x45, 0x67, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x11,
	0x2e, 0x65, 0x67, 0x70, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x65, 0x67, 0x70, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x74, 0x6f, 0x2f, 0x65, 0x67, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_egp_proto_rawDescOnce sync.Once
	file_egp_proto_rawDescData = file_egp_proto_rawDesc
)

func file_egp_proto_rawDescGZIP() []byte {
	file_egp_proto_rawDescOnce.Do(func() {
		file_egp_proto_rawDescData = protoimpl.X.CompressGZIP(file_egp_proto_rawDescData)
	})
	return file_egp_proto_rawDescData
}

var file_egp_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_egp_proto_goTypes = []any{
	(*Date)(nil),          // 0: egp.Date
	(*Event)(nil),         // 1: egp.Event
	(*Category)(nil),      // 2: egp.Category
	(*Categories)(nil),    // 3: egp.Categories
	(*BeerType)(nil),      // 4: egp.BeerType
	(*BeerTypes)(nil),     // 5: egp.BeerTypes
	(*Shop)(nil),          // 6: egp.Shop
	(*ShopLocation)(nil),  // 7: egp.ShopLocation
	(*ShopTime)(nil),      // 8: egp.ShopTime
	(*ShopsRequest)(nil),  // 9: egp.ShopsRequest
	(*ShopsResponse)(nil), // 10: egp.ShopsResponse
}
var file_egp_proto_depIdxs = []int32{
	0,  // 0: egp.Event.StartDate:type_name -> egp.Date
	0,  // 1: egp.Event.EndDate:type_name -> egp.Date
	2,  // 2: egp.Categories.Categories:type_name -> egp.Category
	4,  // 3: egp.BeerTypes.BeerTypes:type_name -> egp.BeerType
	5,  // 4: egp.Shop.BeerTypes:type_name -> egp.BeerTypes
	6,  // 5: egp.ShopsResponse.Shops:type_name -> egp.Shop
	9,  // 6: egp.EgpService.GetShops:input_type -> egp.ShopsRequest
	10, // 7: egp.EgpService.GetShops:output_type -> egp.ShopsResponse
	7,  // [7:8] is the sub-list for method output_type
	6,  // [6:7] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_egp_proto_init() }
func file_egp_proto_init() {
	if File_egp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_egp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_egp_proto_goTypes,
		DependencyIndexes: file_egp_proto_depIdxs,
		MessageInfos:      file_egp_proto_msgTypes,
	}.Build()
	File_egp_proto = out.File
	file_egp_proto_rawDesc = nil
	file_egp_proto_goTypes = nil
	file_egp_proto_depIdxs = nil
}
